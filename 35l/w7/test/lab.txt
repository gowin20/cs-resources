George Owen
405196467

Lab 6 Log
--------------


1. I obtained the simpgmp.c file using "wget http://web.cs.ucla.edu/classes/winter20/cs35L/assign/simpgmp.c",
	Then compiled it with "gcc -lgmp -o smpgmp simpgmp.c"

2. I then ran the program with several different inputs. It took me a second to realize that it only computes powers of two.
	2^24 (2**24): ./smpgmp 24  => 16777216
	2^(2^24) (2**(2**24)): ./smpgmp 16777216 => a REALLY big number. Last eight digits: 84097536
	This number containes 5050446 characters, found using "./smpgmp 16777216 | wc -c"

3. running "ldd smpgmp" shows these libraries: 
	linux-vdso.so.1 =>  (0x00007ffcbdbf0000)
	libgmp.so.10 => /lib64/libgmp.so.10 (0x00007fe708a2d000)
	libc.so.6 => /lib64/libc.so.6 (0x00007fe70865f000)
	/lib64/ld-linux-x86-64.so.2 (0x00007fe708ca5000)

4. running "strace ./smpgmp 24" shows tons of system calls, including several which are used to process shared libraries.

Non Shared Library-related System Calls:
	execve
	brk
	access
	write
	arch_prctl
	munmap

System Calls for Shared Libraries (With examples):

	open - opens the shared library
		open("/lib64/libgmp.so.10", O_RDONLY|O_CLOEXEC) = 3

	read, fstat, mmap, mprotect - processes the contents of the shared library, and loads the code into memory
		read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\200\304\0\0\0\0\0\0"..., 832) = 832
		fstat(3, {st_mode=S_IFREG|0755, st_size=495720, ...}) = 0
		mmap(NULL, 2584736, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f246548e000
		mprotect(0x7f2465504000, 2093056, PROT_NONE) = 0

	close(3) - closes the shared library


5. Running the command "ls /usr/bin | awk '(NR-405196467)%251 == 0'" lists these files as output:

	bashbug-64
	db47_checkpoint
	ftp-rfc
	gvfs-move
	kde-mv
	mailq
	online-access-registry
	pdftex
	policytool
	rpcgen
	synclient
	x86_64
(12 in total)

6. To efficiently process these, I created a bash script ldder.sh which contains the followng code:
		#!/bin/bash                                                                                                                                                                    
		for x in "$(ls /usr/bin | awk '(NR-405196467)%251 == 0')"; do
		    y=`which $x`
		    ldd $y

		done
This makes it easy to run ldd on every command at once. Running "./ldder.sh" lists all of the shared libraries used by each program.
No errors occured! Woohoo :) I was able to write that script quickly. This makes me happy

To find a sorted list of only unique shared libraries, I simply piped to sort -u:
	./ldder.sh | grep so | sort -u > sharedList
grep so makes sure it's only shared libraries, and not the names of the programs or other fluff generated by my script

	./ldder.sh | grep so | sort -u | wc
There are 173 unique shared libraries used across these commands. 
