George Owen
405196467

Lab 4 Log
--------------

	./configure --prefix=/u/eng/class/clasowe/35l/bCoreutils
		using --prefix configures the coreutils package to install
		 in the specified folder, instead of in /usr/bin
	make
		This command compiles and maintains all the 
		code found within coreutils
	make install
		After running make, make install will actually install 
		the package within the folder I specified


Building this caused an error:
	In file included from utimecmp.c:41:
	utimens.h:2:5: error: conflicting types for 'futimens'
	    2 | int futimens (int, char const *, struct timespec const [2]);
	      |     ^~~~~~~~
	In file included from utimecmp.h:25,
	                 from utimecmp.c:25:
	/usr/include/sys/stat.h:373:12: note: previous declaration of 'futimens' was here
	  373 | extern int futimens (int __fd, const struct timespec __times[2]) __THROW;
	      |            ^~~~~~~~

I downloaded the patch using
	wget http://web.cs.ucla.edu/classes/winter20/cs35L/assign/coreutils.diff
then applied it with
	patch -p0 < coreutils.diff

after that, I was able to sucessfully build coreutils.


Then I reproduced the problem by creating an "old" file

	touch -d '1912-11-11 11:00 GMT' titanic-logs

	touch now
	sleep 1
	touch now1

	gdb --args ./coreutils-with-bug/src/ls -lt --full-time titanic-logs now now1
	-rw-r--r-- 1 classowe class 0 2048-12-17 17:28:16.000000000 +0000 titanic-logs
	-rw-r--r-- 1 classowe class 0 2020-02-03 07:48:46.442793000 +0000 now1
	-rw-r--r-- 1 classowe class 0 2020-02-03 07:48:39.939753000 +0000 now


The bug replicated, I was ready to deduce the source of the error. It was time for GDB.

I used GDB to find several candidate functions named 'cmp_?time.'
It seemed the cmp_mtime function was the one causing me issues:
	static inline int
	cmp_mtime (struct fileinfo const *a, struct fileinfo const *b,
	           int (*cmp) (char const *, char const *))
	{
	  int diff = timespec_cmp (get_stat_mtime (&b->stat),
	                           get_stat_mtime (&a->stat));
	  return diff ? diff : cmp (a->name, b->name);
	}
This function invokes a function called timespec_cmp, which
is where the crucial error is made - it seems as if the times are subtracted
from each other, which easily causes overflow when the times are old.

To fix this, I constructed a file lab4.diff, containing simple code written to patch
timespec_cmp. 

The top of this file contains a Changelog entry, describing the exact change I made. The rest
is simply a diff -u file containing that code.

I moved the file to /coreutils-with-bug/ and used
	patch -p0 <lab4.diff
to patch. It worked! After that, I used "make" to rebuild coreutils.

Running the command
	./coreutils-with-bug/src/ls -lt --full-time titanic-logs now now1
works in the $tmp directory. 
However, when running "ls" in the normal seasnet home directory (the new version, not the old coreutils), the patch
still does not work! :( 
This is because the seasnet filesystem uses 32-bit timestamps, as opposed to the $tmp directory's 64-bit stamps.
32-bit timestamps cannot handle old dates (before 1970), meaning this problem is still going to happen. RIP